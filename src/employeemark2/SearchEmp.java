/*
 * Arvind Nagabhirava
 * Employee Management System - 2019
 */
package employeemark2;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ArvindNagabhirava
 */
public class SearchEmp extends javax.swing.JFrame {

    EmployeeInfo foundEmp;
    private static JTable employeeTable;

    /**
     * Creates new form SearchEmp
     */
    public SearchEmp(JTable employeeTable) {
        this.employeeTable = employeeTable;
        initComponents();
        resultsTable.setVisible(false);
        message.setVisible(false);
        editEmployee.setVisible(false);
        removeButton.setVisible(false);
        viewProfile.setVisible(false);
        foundEmp = null;
        center();
        initMouseListener();
        enumfield.requestFocus();
    }
    static Point mouseDownCompCoords;

    private void initMouseListener() {
        try {
            this.addMouseListener(new MouseListener() {
                public void mouseReleased(MouseEvent e) {
                    mouseDownCompCoords = null;
                }

                public void mousePressed(MouseEvent e) {
                    mouseDownCompCoords = e.getPoint();
                }

                public void mouseExited(MouseEvent e) {
                }

                public void mouseEntered(MouseEvent e) {
                }

                public void mouseClicked(MouseEvent e) {
                }
            });

            this.addMouseMotionListener(new MouseMotionListener() {
                public void mouseMoved(MouseEvent e) {
                }

                public void mouseDragged(MouseEvent e) {
                    Point currCoords = e.getLocationOnScreen();
                    setLocation(currCoords.x - mouseDownCompCoords.x, currCoords.y - mouseDownCompCoords.y);
                }
            });
        } catch (Exception e) {
            //Silence
        }

    }
    private void center() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        searchButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        enumfield1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        enumfield = new javax.swing.JTextField();
        enumSearch = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        editEmployee = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        viewProfile = new javax.swing.JButton();
        exitButtonTop = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel11.setText("Add Full Time Employee");

        searchButton1.setText("Search");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1searchPerformed(evt);
            }
        });

        jLabel2.setText("Enter Employee Number");

        enumfield1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enumfield1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel12.setText("Search Employee");

        jLabel1.setText("Search Parameters");

        enumfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enumfieldActionPerformed(evt);
            }
        });
        enumfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enumfieldKeyPressed(evt);
            }
        });

        enumSearch.setText("Search");
        enumSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enumSearch(evt);
            }
        });

        message.setText("Search outcome message displayed here");

        editEmployee.setText("Edit Employee");
        editEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEmployeeActionPerformed(evt);
            }
        });

        removeButton.setText("Remove Employee");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        viewProfile.setText("View Profile");
        viewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProfileActionPerformed(evt);
            }
        });

        exitButtonTop.setText("X");
        exitButtonTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonTopActionPerformed(evt);
            }
        });

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Employee Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableDoubleClickTable(evt);
            }
        });
        jScrollPane1.setViewportView(resultsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitButtonTop))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jLabel12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(enumfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(enumSearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(125, 152, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(279, 279, 279))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(exitButtonTop)
                .addGap(22, 22, 22)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(enumfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enumSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(message)
                .addGap(18, 18, 18)
                .addComponent(exitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewProfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editEmployee)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enumfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enumfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enumfieldActionPerformed

    private void enumSearch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enumSearch
        // TODO add your handling code here:
        message.setText("");
        message.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        model.setRowCount(0);
        
        try{
            this.foundEmp = LoginPage.getHashTable().search(Integer.parseInt(enumfield.getText()));
            if (foundEmp == null) {
            message.setText("This employee number is not in the database");
            message.setVisible(true);
        } else {
            model.addRow(new Object[]{foundEmp.getFirstName(), foundEmp.getLastName(), foundEmp.getEmployeeNumber()});
            resultsTable.setVisible(true);
            message.setText(foundEmp.getFirstName() + " " + foundEmp.getLastName() + " is in the system.");
            message.setVisible(true);
            editEmployee.setVisible(true);
            removeButton.setVisible(true);
            viewProfile.setVisible(true);
        }
        }
        catch (Exception e){
                ArrayList<EmployeeInfo> results = LoginPage.getHashTable().nameSearch(enumfield.getText());
                if (!results.isEmpty()){
                    model.setRowCount(0);
                    for (int i = 0; i < results.size(); i++){
                        model.addRow(new Object[]{results.get(i).getFirstName(), results.get(i).getLastName(), results.get(i).getEmployeeNumber()});
                    }
                    resultsTable.setVisible(true);
                    editEmployee.setVisible(true);
                    removeButton.setVisible(true);
                    viewProfile.setVisible(true);
                } else {
                    message.setText("No employees matching your criteria were found");
                    message.setVisible(true);
                    System.out.println(message);

                }        
        }
        
    }//GEN-LAST:event_enumSearch

    private void editEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEmployeeActionPerformed
        // TODO add your handling code here:
        try{
        int row = resultsTable.getSelectedRow();
        int column = 2;
        int empNum =  (int) resultsTable.getValueAt(row,column);
        
        EmployeeInfo e = LoginPage.getHashTable().search(empNum);
        if (e instanceof PTE) {
            PTE pte = (PTE) e;
            this.dispose();
            new EditPTE(pte,resultsTable).setVisible(true);
        } else {
            FTE fte = (FTE) e;
            this.dispose();
            new EditFTE(fte,resultsTable).setVisible(true);
            
        }
        }
        catch (Exception exc){
            JOptionPane.showMessageDialog(null, "Select an employee from the results table to edit");
        }

    }//GEN-LAST:event_editEmployeeActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        try{
        int row = resultsTable.getSelectedRow();
        int column = 2;
        int empNum =  (int) resultsTable.getValueAt(row,column);
        this.foundEmp = LoginPage.getHashTable().search(empNum);
        JOptionPane.showMessageDialog(null, "Successfully removed " + foundEmp.getFirstName() + foundEmp.getLastName());
        LoginPage.getHashTable().removeFromTable(empNum);
        LoginPage.getHashTable().fillTable(employeeTable);
        this.dispose();
        }
        catch (Exception exc){
            JOptionPane.showMessageDialog(null, "Select an employee from the results table to remove");       
        }
        
    }//GEN-LAST:event_removeButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void viewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProfileActionPerformed
        // TODO add your handling code here:
        try{
        int row = resultsTable.getSelectedRow();
        int column = 2;
        int empNum =  (int) resultsTable.getValueAt(row,column);
        
        EmployeeInfo e = LoginPage.getHashTable().search(empNum);
        if (e instanceof PTE) {
            PTE pte = (PTE) e;
            this.dispose();
            new PTEProfile(pte,resultsTable).setVisible(true);
        } else {
            FTE fte = (FTE) e;
            this.dispose();
            new FTEProfile(fte,resultsTable).setVisible(true);
            
        }
        }
        catch (Exception exc){
            JOptionPane.showMessageDialog(null, "Select an employee from the results table to view their profile");
        }
        
    }//GEN-LAST:event_viewProfileActionPerformed

    private void exitButtonTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonTopActionPerformed
        this.dispose();
        LoginPage.getHashTable().fillTable(employeeTable);
    }//GEN-LAST:event_exitButtonTopActionPerformed

    private void enumfield1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enumfield1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enumfield1ActionPerformed

    private void searchButton1searchPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1searchPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton1searchPerformed

    private void resultsTableDoubleClickTable(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableDoubleClickTable
        // TODO add your handling code here:
        // Shows profile of selected employee
        if (evt.getClickCount() == 2) {
            JTable source = (JTable) evt.getSource();
            int row = source.rowAtPoint(evt.getPoint());
            int column = 2;
            int empNum =  (int) resultsTable.getValueAt(row,column);

            EmployeeInfo e = LoginPage.getHashTable().search(empNum);
            if (e instanceof PTE) {
                PTE pte = (PTE) e;
                this.dispose();
                new PTEProfile(pte, resultsTable).setVisible(true);
            }

            else {
                FTE fte = (FTE) e;
                this.dispose();
                new FTEProfile(fte,resultsTable).setVisible(true);
            }

        }

    }//GEN-LAST:event_resultsTableDoubleClickTable

    private void enumfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enumfieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //search by enum
        message.setText("");
        message.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        model.setRowCount(0);
        
        try{
            this.foundEmp = LoginPage.getHashTable().search(Integer.parseInt(enumfield.getText()));
            if (foundEmp == null) {
            message.setText("This employee number is not in the database");
            message.setVisible(true);
        } else {
            model.addRow(new Object[]{foundEmp.getFirstName(), foundEmp.getLastName(), foundEmp.getEmployeeNumber()});
            resultsTable.setVisible(true);
            message.setText(foundEmp.getFirstName() + " " + foundEmp.getLastName() + " is in the system.");
            message.setVisible(true);
            editEmployee.setVisible(true);
            removeButton.setVisible(true);
            viewProfile.setVisible(true);
        }
        }
        catch (Exception e){
                ArrayList<EmployeeInfo> results = LoginPage.getHashTable().nameSearch(enumfield.getText());
                if (!results.isEmpty()){
                    model.setRowCount(0);
                    for (int i = 0; i < results.size(); i++){
                        model.addRow(new Object[]{results.get(i).getFirstName(), results.get(i).getLastName(), results.get(i).getEmployeeNumber()});
                    }
                    resultsTable.setVisible(true);
                    editEmployee.setVisible(true);
                    removeButton.setVisible(true);
                    viewProfile.setVisible(true);
                } else {
                    message.setText("No employees matching your criteria were found");
                    message.setVisible(true);
                    System.out.println(message);

                }        
        }
        }
    }//GEN-LAST:event_enumfieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchEmp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchEmp(employeeTable).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editEmployee;
    private javax.swing.JButton enumSearch;
    private javax.swing.JTextField enumfield;
    private javax.swing.JTextField enumfield1;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exitButtonTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel message;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton viewProfile;
    // End of variables declaration//GEN-END:variables
}
